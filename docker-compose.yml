version: "3.9"
services:
  ###
  ### APPS
  ###

  hasura-events:
    build:
      context: ./hasura-events
      dockerfile: Dockerfile.dev
    ports:
      - "${HASURA_EVENTS_PORT:-4010}:8080"
    volumes:
      - ./meta:/var/lib/meta
      - ./hasura-events/src:/usr/src/app/src:delegated
      - ./hasura-events/package.json:/usr/src/app/package.json
    environment:
      HASURA_GRAPHQL_AUTH_TOKEN: "xxx"
      HASURA_GRAPHQL_ENDPOINT: http://hasura-engine:8080
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "-qO", "-", "http://hasura-events:8080/healthz"]
      interval: 2s
      timeout: 1s
      retries: 20

  hasura-actions:
    build:
      context: ./hasura-actions
      dockerfile: Dockerfile.dev
    ports:
      - "${HASURA_ACTIONS_PORT:-4020}:8080"
    volumes:
      - ./meta:/var/lib/meta
      - ./hasura-actions/src:/usr/src/app/src:delegated
      - ./hasura-actions/package.json:/usr/src/app/package.json
    environment:
      HASURA_GRAPHQL_AUTH_TOKEN: "xxx"
      HASURA_GRAPHQL_ENDPOINT: http://hasura-engine:8080
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "-qO", "-", "http://hasura-actions:8080/healthz"]
      interval: 2s
      timeout: 1s
      retries: 20

  graphql-api:
    build:
      context: ./graphql-api
      dockerfile: Dockerfile.dev
    ports:
      - "${GRAPHQL_API_PORT:-4030}:8080"
    volumes:
      - ./meta:/var/lib/meta
      - ./graphql-api/src:/usr/src/app/src:delegated
      - ./graphql-api/package.json:/usr/src/app/package.json
    environment:
      HASURA_GRAPHQL_AUTH_TOKEN: "xxx"
      HASURA_GRAPHQL_ENDPOINT: http://hasura-engine:8080
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "-qO", "-", "http://graphql-api:8080/healthz"]
      interval: 2s
      timeout: 1s
      retries: 20

  ###
  ### SERVICES
  ###

  hasura-engine:
    image: hasura/graphql-engine:v2.9.0-beta.1.cli-migrations-v3
    ports:
      - "8080:8080"
    environment:
      HASURA_GRAPHQL_DEV_MODE: "true"
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true"
      HASURA_GRAPHQL_ADMIN_SECRET: "${HASURA_ADMIN_SECRET:-hasura}"
      HASURA_GRAPHQL_JWT_SECRET: '{"type":"HS256", "key": "${HASURA_JWT_SECRET:-h2leOvdgjwpV0As5L8rZlV3VDVOsOmwk}"}'
      HASURA_GRAPHQL_DATABASE_URL: postgres://postgres:${POSTGRES_PASSWORD:-postgres}@hasura-db:5432/postgres
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      HASURA_GRAPHQL_ENABLE_TELEMETRY: "false"
      HASURA_EVENTS_ENDPOINT: "http://hasura-events:8080"
      HASURA_ACTIONS_ENDPOINT: "http://hasura-actions:8080"
      GRAPHQL_API_ENDPOINT: "http://graphql-api:8080"
    restart: unless-stopped
    depends_on:
      hasura-db:
        condition: service_healthy
      hasura-events:
        condition: service_healthy
      hasura-actions:
        condition: service_healthy
      graphql-api:
        condition: service_healthy
    healthcheck:
      test: timeout 1s bash -c ':> /dev/tcp/127.0.0.1/8080' || exit 1
      interval: 2s
      timeout: 1s
      retries: 10

  hasura-db:
    image: postgres:14
    ports:
      - "${HASURA_DB_PORT:-5432}:5432"
    volumes:
      - .docker-data/hasura-db:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 2s
      timeout: 1s
      retries: 20

  ###
  ### UTILITIES
  ###

  hasura-cli:
    image: hasura/graphql-engine:v2.9.0-beta.1.cli-migrations-v3
    volumes:
      - ./hasura-migrations:/hasura-migrations
    environment:
      HASURA_GRAPHQL_ADMIN_SECRET: "${HASURA_ADMIN_SECRET:-hasura}"
      HASURA_GRAPHQL_ENDPOINT: http://hasura-engine:8080
      HASURA_APPLY_MIGRATIONS: "true"
      HASURA_APPLY_METADATA: "true"
      HASURA_APPLY_SEEDS: "true"
      HASURA_VERIFY: "true"
    depends_on:
      hasura-engine:
        condition: service_healthy
    working_dir: /hasura-migrations
    entrypoint: ./migrate.sh

  adminer:
    image: adminer:4.8.1
    links:
      - hasura-db:postgres
      - hasura-db:db
    ports:
      - "${ADMINER_PORT:-8008}:8080"
    restart: unless-stopped
    depends_on:
      hasura-db:
        condition: service_healthy

  ###
  ### TESTS
  ###

  hasura-events-test:
    build:
      context: ./hasura-events
      dockerfile: Dockerfile.dev
    environment:
      TEST_URL: http://hasura-events:8080
    volumes:
      - ./hasura-events/src:/usr/src/app/src:delegated
      - ./hasura-events/test:/usr/src/app/test:delegated
    entrypoint: ["npm", "run", "test"]
    tty: true
    depends_on:
      hasura-events:
        condition: service_healthy

  hasura-actions-test:
    build:
      context: ./hasura-actions
      dockerfile: Dockerfile.dev
    environment:
      TEST_URL: http://hasura-actions:8080
    volumes:
      - ./hasura-actions/src:/usr/src/app/src:delegated
      - ./hasura-actions/test:/usr/src/app/test:delegated
    entrypoint: ["npm", "run", "test"]
    tty: true
    depends_on:
      hasura-events:
        condition: service_healthy

  graphql-api-test:
    build:
      context: ./graphql-api
      dockerfile: Dockerfile.dev
    environment:
      TEST_URL: http://graphql-api:8080
    volumes:
      - ./graphql-api/src:/usr/src/app/src:delegated
      - ./graphql-api/test:/usr/src/app/test:delegated
    entrypoint: ["npm", "run", "test"]
    tty: true
    depends_on:
      hasura-events:
        condition: service_healthy
